# 1 "/home/akandra/git/kmc_tian/energy_parameters_class.f90"
module energy_parameters_class

  use utilities
  use control_parameters_class
  use open_file

  implicit none

  private
  public :: energy_parameters_init

  type, public :: energy_parameters

! Adsorpton energies (n_species x n_site_type x n_adsorption_sites)
    real(dp), dimension(:,:,:), allocatable :: ads_energy

! Interaction energy law id (n_species x n_site_type x n_adsorption_sites x
!                            n_species x n_site_type x n_adsorption_sites)
    integer, dimension(:,:,:,:,:,:), allocatable :: int_energy_law_id

! Interaction energy (n_species x n_site_type x n_adsorption_sites x
!                     n_species x n_site_type x n_adsorption_sites x n_shells x max_n_neighbors )
    real(dp), dimension(:,:,:,:,:,:,:,:),allocatable :: int_energy_pars

! Interaction energy mask (n_species x n_species x n_shells)
! .true. means to skip interaction
    logical, dimension(:,:,:,:,:,:,:),allocatable :: int_energy_skip

    logical :: is_interaction
! Species importance key (n_species)
    logical, dimension(:), allocatable :: is_essential

! Default value for undefined energy
    real(dp) :: undefined_energy


  contains

!    procedure :: read  => control_parameters_read

  end type


contains

  function energy_parameters_init(control_pars)

    type(energy_parameters) energy_parameters_init

    type(control_parameters), intent(inout) :: control_pars

    integer :: i, ios, line_number, i1, i1s, i1a, i2, i2s, i2a, i_law

    character(len=max_string_length) :: buffer
    character(len=max_string_length), allocatable :: tokens(:), toks(:)
    integer :: ntokens, ntoks, nn
    character(len=len(trim(control_pars%energy_file_name))) :: file_name

    character(len=10) :: current_species_name
    integer           :: current_species_id

    integer           :: parse_state
    integer           :: parse_state_default      =0
    integer           :: parse_state_adsorption   =1
    integer           :: parse_state_interaction  =2

    logical :: first_warning = .true.
    integer,  parameter:: default_int = 0
    real(dp) :: temp_dp

    i = control_pars%n_species
    allocate(energy_parameters_init%ads_energy(i,n_max_lat_site_types,n_max_ads_sites))
    allocate(energy_parameters_init%int_energy_law_id(i,n_max_lat_site_types,n_max_ads_sites,&
                                                      i,n_max_lat_site_types,n_max_ads_sites))
    allocate(energy_parameters_init%int_energy_pars(i,n_max_lat_site_types,n_max_ads_sites,&
                                                    i,n_max_lat_site_types,n_max_ads_sites,n_shells,max_n_neighbors))
    allocate(energy_parameters_init%int_energy_skip(i,n_max_lat_site_types,n_max_ads_sites,&
                                                    i,n_max_lat_site_types,n_max_ads_sites,n_shells))
    allocate(energy_parameters_init%is_essential(i))

    energy_parameters_init%undefined_energy = huge(0.0_dp)
    energy_parameters_init%ads_energy = energy_parameters_init%undefined_energy
    energy_parameters_init%int_energy_law_id = default_int
    energy_parameters_init%int_energy_pars = energy_parameters_init%undefined_energy
    energy_parameters_init%int_energy_skip = .true.
    energy_parameters_init%is_interaction  = .false.
    energy_parameters_init%is_essential    = .false.

!  read energy definitions from the input file
    file_name = control_pars%energy_file_name
    call open_for_read(inp_unit, file_name )

    ios = 0
    parse_state = parse_state_default
    line_number = 0

    do while (ios == 0)

      read(inp_unit, '(A)', iostat=ios) buffer
      line_number = line_number + 1
! ios < 0: end of record condition encountered or endfile condition detected
! ios > 0: an error is detected
! ios = 0  otherwise

      if (ios /= 0) exit

! Split an input string
      if (.not. get_tokens(buffer, ntokens, tokens)) then
        call error_message(file_name, line_number, buffer, "unpaired curly braces")
      else
        if (ntokens == 0) cycle ! skip empty lines

        if (tokens(1) =='adsorption') then

          if (parse_state /= parse_state_default) &
            call error_message(file_name, line_number, buffer, &
                      "invalid ending of the adsorption/interaction section")
          parse_state = parse_state_adsorption
          if (ntokens/=2 .and. ntokens/=3) &
            call error_message(file_name, line_number, buffer, &
                      "adsorption key must have 1 or 2 parameters")

          read(tokens(2),'(A)') current_species_name
          current_species_id = get_index(current_species_name, control_pars%ads_names )
          if (current_species_id == 0) &
            call error_message(file_name, line_number, buffer, &
                      "inconsistent adsorbate definition")
          if (ntokens > 2) then
            if (tokens(3) == essential_name) then
              energy_parameters_init%is_essential(current_species_id) = .true.
            else
              call error_message(file_name, line_number, buffer, &
                      "adsorption: unknown stopping trigger name")
            end if
          end if

!            print*, 'name     =', current_species_name
!            print*, 'id       =', current_species_id
!            print*, control_pars%ads_names

        elseif (get_index(tokens(1),lat_site_names) /= 0) then

          if (parse_state /= parse_state_adsorption) then
! print *, 'parse_state: ', parse_stat=
            call error_message(file_name, line_number, buffer, "invalid site type statement")
          end if


          i1 = get_index(tokens(1),lat_site_names)
          i2 = get_index(tokens(2),ads_site_names)

          if ( i1==0 ) &
              call error_message(file_name, line_number, buffer, &
                          "unknown lattice site type in the adsorption section")
          if ( i2==0 ) &
              call error_message(file_name, line_number, buffer, &
                          "unknown adsorption site type in the adsorption section")
          if (energy_parameters_init%ads_energy(current_species_id,i1,i2 ) /= energy_parameters_init%undefined_energy)&
              call error_message(file_name, line_number, buffer, "duplicated entry")

          read(tokens(3),*) energy_parameters_init%ads_energy(current_species_id,i1,i2 )
!              print*, 'species  ' ,current_species_id, &
!                      'site     ' ,get_index(tokens(1),lat_site_names),&
!                      'ads_site ' ,get_index(tokens(2),ads_site_names)
!              print*, 'energy:  ' ,energy_parameters_init%ads_energy&
!                                    (current_species_id,&
!                                     get_index(tokens(1),lat_site_names),&
!                                     get_index(tokens(2),ads_site_names) )

        elseif (tokens(1) == 'interaction') then

          if (parse_state /= parse_state_default) &
            call error_message(file_name, line_number, buffer, &
                      "invalid ending of the adsorption/interaction section")
          parse_state = parse_state_interaction
          if (ntokens/=1) call error_message(file_name, line_number, buffer, &
                            "interaction key must have no parameters")

        elseif (get_index(tokens(1),int_law_names) /= 0) then

          if (parse_state /= parse_state_interaction) &
            call error_message(file_name, line_number, buffer, &
                      "invalid interaction law statement")
          if (ntokens /= 7+n_shells) then
            call error_message(file_name, line_number, buffer, &
                            "interaction law key must have (7 + n_shells) sets of parameters")
          else

            i_law = get_index(tokens(1),int_law_names)
            i1    = get_index(tokens(2),control_pars%ads_names)
            i1s   = get_index(tokens(3),lat_site_names)
            i1a   = get_index(tokens(4),ads_site_names)
            i2    = get_index(tokens(5),control_pars%ads_names)
            i2s   = get_index(tokens(6),lat_site_names)
            i2a   = get_index(tokens(7),ads_site_names)

            if ( i1==0 .or. i2==0 ) call error_message(file_name, line_number, buffer, &
                              "unknown species name in the interaction law")
            if ( i1s==0 .or. i2s==0 ) &
                call error_message(file_name, line_number, buffer, &
                            "unknown lattice site type in the interaction section")
            if ( i1a==0 .or. i2a==0 ) &
                call error_message(file_name, line_number, buffer, &
                            "unknown adsorption site type in the interaction section")
            if (energy_parameters_init%int_energy_law_id(i1,i1s,i1a,i2,i2s,i2a) /= default_int)&
                call error_message(file_name, line_number, buffer, "duplicated entry in the interaction section")
            energy_parameters_init%int_energy_law_id(i1,i1s,i1a,i2,i2s,i2a) = i_law
            energy_parameters_init%int_energy_law_id(i2,i2s,i2a,i1,i1s,i1a) = i_law

! Loop over interaction shells
            do i=8,ntokens

! Neighbor-specific interaction parameters
              if (tokens(i)(1:1) == '{') then

                if (.not.get_tokens(tokens(i)(2:len_trim(tokens(i))-1), ntoks, toks)) then
                  call error_message(file_name, line_number, buffer, &
                              "unpaired curly braces in interaction parameters")
                elseif (ntoks == 0 .or. ntoks > max_n_neighbors) then
                  call error_message(file_name, line_number, buffer, &
                              "wrong number of neighbor-specific interaction parameters")
                else
                  do nn=1,ntoks
                    if (.not.read_num(toks(nn), temp_dp)) then
                      call error_message(file_name, line_number, buffer, &
                              "neighbor-specific interaction parameters must be numbers")
                    else
                      energy_parameters_init%int_energy_skip(i1,i1s,i1a,i2,i2s,i2a,i-7) = .false.
                      energy_parameters_init%int_energy_pars(i1,i1s,i1a,i2,i2s,i2a,i-7,nn) = temp_dp
                    end if
                  end do
                end if

! Take '-' or '*' as a dummy token
              elseif (len_trim(tokens(i)) == 1 .and. &
                      (tokens(i)(1:1) == '-' .or. tokens(i)(1:1) == '*') ) then
                cycle

! Common interaction parameter for all neighbors
              else
                if (read_num(tokens(i), temp_dp)) then
                  energy_parameters_init%int_energy_skip(i1,i1s,i1a,i2,i2s,i2a,i-7) = .false.
                  energy_parameters_init%int_energy_pars(i1,i1s,i1a,i2,i2s,i2a,i-7,:) = temp_dp
                else
                  call error_message(file_name, line_number, buffer, &
                              "common interaction parameter must be a number")
                end if
              end if

! Symmetrize interaction parameters
!energy_parameters_init%int_energy_pars(i2,i2s,i2a,i1,i1s,i1a,i-7,:) = &
!  energy_parameters_init%int_energy_pars(i1,i1s,i1a,i2,i2s,i2a,i-7,:)
              energy_parameters_init%int_energy_skip(i2,i2s,i2a,i1,i1s,i1a,i-7) = &
                energy_parameters_init%int_energy_skip(i1,i1s,i1a,i2,i2s,i2a,i-7)
            end do ! i=8,ntokens

          end if

!            print*, 'int. law: ', energy_parameters_init%int_energy_law_id(i1,i2),&
!                    ' for species 1:', i1,&
!                    ' and species 2:', i2
!            print'(A,3e16.8,3L)', 'int. pars: ', energy_parameters_init%int_energy_pars(i1,i2,:)&
!                                              , energy_parameters_init%int_energy_skip(i1,i2,:)

        elseif (tokens(1) == section_end) then

          parse_state = parse_state_default

        else

!            print*, 'unprocessed line: ', trim(buffer)
          call error_message(file_name, line_number, buffer, "unknown key")

        end if
      end if ! get_tokens
    end do ! while ios=0

    energy_parameters_init%is_interaction = &
              any(.not.energy_parameters_init%int_energy_skip)

! Check the input consistency
    do i1 =1,control_pars%n_species
    do i1s=1,n_max_lat_site_types
    do i1a=1,n_max_ads_sites
      if (energy_parameters_init%ads_energy(i1,i1s,i1a) == energy_parameters_init%undefined_energy) then
        do i2 =1,control_pars%n_species
        do i2s=1,n_max_lat_site_types
        do i2a=1,n_max_ads_sites
          if (any(.not. energy_parameters_init%int_energy_skip(i1,i1s,i1a, i2,i2s,i2a, :))) then
            if (first_warning) then
              write(*,'(A)') ' Warning:'
              write(*,'(A)') '    file: '//trim(file_name)
              first_warning = .false.
            end if
            write(*,'(A)')   '    interaction section: adsorption energy for '//&
                                  trim(control_pars%ads_names(i1))//' '//&
                                  trim(lat_site_names(i1s))//' '//trim(ads_site_names(i1a))//' '//&
                                  'not defined'
          end if
        end do
        end do
        end do
      end if
    end do
    end do
    end do

  end function

end module energy_parameters_class
